{"remainingRequest":"/Users/andaegeun/Desktop/대덕 최프/kanboo_Vue/kanboo/node_modules/babel-loader/lib/index.js!/Users/andaegeun/Desktop/대덕 최프/kanboo_Vue/kanboo/node_modules/vue-loader-v16/dist/templateLoader.js??ref--6!/Users/andaegeun/Desktop/대덕 최프/kanboo_Vue/kanboo/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/andaegeun/Desktop/대덕 최프/kanboo_Vue/kanboo/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/Users/andaegeun/Desktop/대덕 최프/kanboo_Vue/kanboo/node_modules/vue-radial-progress/src/RadialProgressBar.vue?vue&type=template&id=3e2ff9ec","dependencies":[{"path":"/Users/andaegeun/Desktop/대덕 최프/kanboo_Vue/kanboo/node_modules/vue-radial-progress/src/RadialProgressBar.vue","mtime":499162500000},{"path":"/Users/andaegeun/Desktop/대덕 최프/kanboo_Vue/kanboo/babel.config.js","mtime":1636767532999},{"path":"/Users/andaegeun/Desktop/대덕 최프/kanboo_Vue/kanboo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/andaegeun/Desktop/대덕 최프/kanboo_Vue/kanboo/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/andaegeun/Desktop/대덕 최프/kanboo_Vue/kanboo/node_modules/vue-loader-v16/dist/templateLoader.js","mtime":499162500000},{"path":"/Users/andaegeun/Desktop/대덕 최프/kanboo_Vue/kanboo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/andaegeun/Desktop/대덕 최프/kanboo_Vue/kanboo/node_modules/vue-loader-v16/dist/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgcmVuZGVyU2xvdCBhcyBfcmVuZGVyU2xvdCwgbm9ybWFsaXplU3R5bGUgYXMgX25vcm1hbGl6ZVN0eWxlLCBjcmVhdGVFbGVtZW50Vk5vZGUgYXMgX2NyZWF0ZUVsZW1lbnRWTm9kZSwgb3BlbkJsb2NrIGFzIF9vcGVuQmxvY2ssIGNyZWF0ZUVsZW1lbnRCbG9jayBhcyBfY3JlYXRlRWxlbWVudEJsb2NrIH0gZnJvbSAidnVlIjsKdmFyIF9ob2lzdGVkXzEgPSBbIndpZHRoIiwgImhlaWdodCJdOwp2YXIgX2hvaXN0ZWRfMiA9IFsiaWQiLCAiZngiLCAiZnkiLCAiY3giLCAiY3kiLCAiciJdOwp2YXIgX2hvaXN0ZWRfMyA9IFsic3RvcC1jb2xvciJdOwp2YXIgX2hvaXN0ZWRfNCA9IFsic3RvcC1jb2xvciJdOwp2YXIgX2hvaXN0ZWRfNSA9IFsiciIsICJjeCIsICJjeSIsICJzdHJva2UiLCAic3Ryb2tlLWRhc2hhcnJheSIsICJzdHJva2UtbGluZWNhcCJdOwp2YXIgX2hvaXN0ZWRfNiA9IFsidHJhbnNmb3JtIiwgInIiLCAiY3giLCAiY3kiLCAic3Ryb2tlIiwgInN0cm9rZS1kYXNoYXJyYXkiLCAic3Ryb2tlLWRhc2hvZmZzZXQiLCAic3Ryb2tlLWxpbmVjYXAiXTsKZXhwb3J0IGZ1bmN0aW9uIHJlbmRlcihfY3R4LCBfY2FjaGUsICRwcm9wcywgJHNldHVwLCAkZGF0YSwgJG9wdGlvbnMpIHsKICByZXR1cm4gX29wZW5CbG9jaygpLCBfY3JlYXRlRWxlbWVudEJsb2NrKCJkaXYiLCB7CiAgICBjbGFzczogInJhZGlhbC1wcm9ncmVzcy1jb250YWluZXIiLAogICAgc3R5bGU6IF9ub3JtYWxpemVTdHlsZSgkb3B0aW9ucy5jb250YWluZXJTdHlsZSkKICB9LCBbX2NyZWF0ZUVsZW1lbnRWTm9kZSgiZGl2IiwgewogICAgY2xhc3M6ICJyYWRpYWwtcHJvZ3Jlc3MtaW5uZXIiLAogICAgc3R5bGU6IF9ub3JtYWxpemVTdHlsZSgkb3B0aW9ucy5pbm5lckNpcmNsZVN0eWxlKQogIH0sIFtfcmVuZGVyU2xvdChfY3R4LiRzbG90cywgImRlZmF1bHQiKV0sIDQKICAvKiBTVFlMRSAqLwogICksIChfb3BlbkJsb2NrKCksIF9jcmVhdGVFbGVtZW50QmxvY2soInN2ZyIsIHsKICAgIGNsYXNzOiAicmFkaWFsLXByb2dyZXNzLWJhciIsCiAgICB3aWR0aDogJHByb3BzLmRpYW1ldGVyLAogICAgaGVpZ2h0OiAkcHJvcHMuZGlhbWV0ZXIsCiAgICB2ZXJzaW9uOiAiMS4xIiwKICAgIHhtbG5zOiAiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciCiAgfSwgW19jcmVhdGVFbGVtZW50Vk5vZGUoImRlZnMiLCBudWxsLCBbX2NyZWF0ZUVsZW1lbnRWTm9kZSgicmFkaWFsR3JhZGllbnQiLCB7CiAgICBpZDogJ3JhZGlhbC1ncmFkaWVudCcgKyBfY3R4Ll91aWQsCiAgICBmeDogJGRhdGEuZ3JhZGllbnQuZngsCiAgICBmeTogJGRhdGEuZ3JhZGllbnQuZnksCiAgICBjeDogJGRhdGEuZ3JhZGllbnQuY3gsCiAgICBjeTogJGRhdGEuZ3JhZGllbnQuY3ksCiAgICByOiAkZGF0YS5ncmFkaWVudC5yCiAgfSwgW19jcmVhdGVFbGVtZW50Vk5vZGUoInN0b3AiLCB7CiAgICBvZmZzZXQ6ICIzMCUiLAogICAgInN0b3AtY29sb3IiOiAkcHJvcHMuc3RhcnRDb2xvcgogIH0sIG51bGwsIDgKICAvKiBQUk9QUyAqLwogICwgX2hvaXN0ZWRfMyksIF9jcmVhdGVFbGVtZW50Vk5vZGUoInN0b3AiLCB7CiAgICBvZmZzZXQ6ICIxMDAlIiwKICAgICJzdG9wLWNvbG9yIjogJHByb3BzLnN0b3BDb2xvcgogIH0sIG51bGwsIDgKICAvKiBQUk9QUyAqLwogICwgX2hvaXN0ZWRfNCldLCA4CiAgLyogUFJPUFMgKi8KICAsIF9ob2lzdGVkXzIpXSksIF9jcmVhdGVFbGVtZW50Vk5vZGUoImNpcmNsZSIsIHsKICAgIHI6ICRvcHRpb25zLmlubmVyQ2lyY2xlUmFkaXVzLAogICAgY3g6ICRvcHRpb25zLnJhZGl1cywKICAgIGN5OiAkb3B0aW9ucy5yYWRpdXMsCiAgICBmaWxsOiAidHJhbnNwYXJlbnQiLAogICAgc3Ryb2tlOiAkcHJvcHMuaW5uZXJTdHJva2VDb2xvciwKICAgICJzdHJva2UtZGFzaGFycmF5IjogJG9wdGlvbnMuY2lyY3VtZmVyZW5jZSwKICAgICJzdHJva2UtZGFzaG9mZnNldCI6ICIwIiwKICAgICJzdHJva2UtbGluZWNhcCI6ICRwcm9wcy5zdHJva2VMaW5lY2FwLAogICAgc3R5bGU6IF9ub3JtYWxpemVTdHlsZSgkb3B0aW9ucy5zdHJva2VTdHlsZSkKICB9LCBudWxsLCAxMgogIC8qIFNUWUxFLCBQUk9QUyAqLwogICwgX2hvaXN0ZWRfNSksIF9jcmVhdGVFbGVtZW50Vk5vZGUoImNpcmNsZSIsIHsKICAgIHRyYW5zZm9ybTogJ3JvdGF0ZSgyNzAsICcgKyAkb3B0aW9ucy5yYWRpdXMgKyAnLCcgKyAkb3B0aW9ucy5yYWRpdXMgKyAnKScsCiAgICByOiAkb3B0aW9ucy5pbm5lckNpcmNsZVJhZGl1cywKICAgIGN4OiAkb3B0aW9ucy5yYWRpdXMsCiAgICBjeTogJG9wdGlvbnMucmFkaXVzLAogICAgZmlsbDogInRyYW5zcGFyZW50IiwKICAgIHN0cm9rZTogJ3VybCgjcmFkaWFsLWdyYWRpZW50JyArIF9jdHguX3VpZCArICcpJywKICAgICJzdHJva2UtZGFzaGFycmF5IjogJG9wdGlvbnMuY2lyY3VtZmVyZW5jZSwKICAgICJzdHJva2UtZGFzaG9mZnNldCI6ICRvcHRpb25zLmNpcmN1bWZlcmVuY2UsCiAgICAic3Ryb2tlLWxpbmVjYXAiOiAkcHJvcHMuc3Ryb2tlTGluZWNhcCwKICAgIHN0eWxlOiBfbm9ybWFsaXplU3R5bGUoJG9wdGlvbnMucHJvZ3Jlc3NTdHlsZSkKICB9LCBudWxsLCAxMgogIC8qIFNUWUxFLCBQUk9QUyAqLwogICwgX2hvaXN0ZWRfNildLCA4CiAgLyogUFJPUFMgKi8KICAsIF9ob2lzdGVkXzEpKV0sIDQKICAvKiBTVFlMRSAqLwogICk7Cn0="},{"version":3,"sources":["/Users/andaegeun/Desktop/대덕 최프/kanboo_Vue/kanboo/node_modules/vue-radial-progress/src/RadialProgressBar.vue"],"names":[],"mappings":";;;;;;;;uBACE,mBAAA,CAwCM,KAxCN,EAwCM;AAxCD,IAAA,KAAK,EAAC,2BAwCL;AAxCkC,IAAA,KAAK,EAAA,eAAA,CAAE,QAAA,CAAA,cAAF;AAwCvC,GAxCN,E,CACE,mBAAA,CAEM,KAFN,EAEM;AAFD,IAAA,KAAK,EAAC,uBAEL;AAF8B,IAAA,KAAK,EAAA,eAAA,CAAE,QAAA,CAAA,gBAAF;AAEnC,GAFN,E,CACE,WAAA,CAAa,IAAA,CAAA,MAAb,EAAa,SAAb,C,CADF,E;;AAAA,G,iBAGA,mBAAA,CAmCM,KAnCN,EAmCM;AAnCD,IAAA,KAAK,EAAC,qBAmCL;AAlCA,IAAA,KAAK,EAAE,MAAA,CAAA,QAkCP;AAjCA,IAAA,MAAM,EAAE,MAAA,CAAA,QAiCR;AAhCD,IAAA,OAAO,EAAC,KAgCP;AA/BD,IAAA,KAAK,EAAC;AA+BL,GAnCN,E,CAKE,mBAAA,CAUO,MAVP,EAUO,IAVP,EAUO,CATL,mBAAA,CAQiB,gBARjB,EAQiB;AARA,IAAA,EAAE,EAAA,oBAAsB,IAAA,CAAA,IAQxB;AAPA,IAAA,EAAE,EAAE,KAAA,CAAA,QAAA,CAAS,EAOb;AANA,IAAA,EAAE,EAAE,KAAA,CAAA,QAAA,CAAS,EAMb;AALA,IAAA,EAAE,EAAE,KAAA,CAAA,QAAA,CAAS,EAKb;AAJA,IAAA,EAAE,EAAE,KAAA,CAAA,QAAA,CAAS,EAIb;AAHA,IAAA,CAAC,EAAE,KAAA,CAAA,QAAA,CAAS;AAGZ,GARjB,E,CAME,mBAAA,CAA6C,MAA7C,EAA6C;AAAvC,IAAA,MAAM,EAAC,KAAgC;AAAzB,kBAAY,MAAA,CAAA;AAAa,GAA7C,E,IAAA,E;;AAAA,I,UAAA,C,EACA,mBAAA,CAA6C,MAA7C,EAA6C;AAAvC,IAAA,MAAM,EAAC,MAAgC;AAAxB,kBAAY,MAAA,CAAA;AAAY,GAA7C,E,IAAA,E;;AAAA,I,UAAA,C,CAPF,E;;AAAA,I,UAAA,CASK,CAVP,C,EAWA,mBAAA,CAQsC,QARtC,EAQsC;AAR7B,IAAA,CAAC,EAAE,QAAA,CAAA,iBAQ0B;AAP7B,IAAA,EAAE,EAAE,QAAA,CAAA,MAOyB;AAN7B,IAAA,EAAE,EAAE,QAAA,CAAA,MAMyB;AAL9B,IAAA,IAAI,EAAC,aAKyB;AAJ7B,IAAA,MAAM,EAAE,MAAA,CAAA,gBAIqB;AAH7B,wBAAkB,QAAA,CAAA,aAGW;AAF9B,yBAAkB,GAEY;AAD7B,sBAAgB,MAAA,CAAA,aACa;AAA7B,IAAA,KAAK,EAAA,eAAA,CAAE,QAAA,CAAA,WAAF;AAAwB,GARtC,E,IAAA,E;;AAAA,I,UAAA,C,EASA,mBAAA,CASwC,QATxC,EASwC;AAT/B,IAAA,SAAS,EAAA,iBAAmB,QAAA,CAAA,MAAnB,GAAyB,GAAzB,GAAkC,QAAA,CAAA,MAAlC,GAAwC,GASlB;AAR/B,IAAA,CAAC,EAAE,QAAA,CAAA,iBAQ4B;AAP/B,IAAA,EAAE,EAAE,QAAA,CAAA,MAO2B;AAN/B,IAAA,EAAE,EAAE,QAAA,CAAA,MAM2B;AALhC,IAAA,IAAI,EAAC,aAK2B;AAJ/B,IAAA,MAAM,EAAA,yBAA2B,IAAA,CAAA,IAA3B,GAA+B,GAIN;AAH/B,wBAAkB,QAAA,CAAA,aAGa;AAF/B,yBAAmB,QAAA,CAAA,aAEY;AAD/B,sBAAgB,MAAA,CAAA,aACe;AAA/B,IAAA,KAAK,EAAA,eAAA,CAAE,QAAA,CAAA,aAAF;AAA0B,GATxC,E,IAAA,E;;AAAA,I,UAAA,C,CAzBF,E;;AAAA,I,UAAA,C,EAJF,E;;AAAA,G","sourcesContent":["<template>\n  <div class=\"radial-progress-container\" :style=\"containerStyle\">\n    <div class=\"radial-progress-inner\" :style=\"innerCircleStyle\">\n      <slot></slot>\n    </div>\n    <svg class=\"radial-progress-bar\"\n         :width=\"diameter\"\n         :height=\"diameter\"\n         version=\"1.1\"\n         xmlns=\"http://www.w3.org/2000/svg\">\n      <defs>\n        <radialGradient :id=\"'radial-gradient' + _uid\"\n                        :fx=\"gradient.fx\"\n                        :fy=\"gradient.fy\"\n                        :cx=\"gradient.cx\"\n                        :cy=\"gradient.cy\"\n                        :r=\"gradient.r\">\n          <stop offset=\"30%\" :stop-color=\"startColor\"/>\n          <stop offset=\"100%\" :stop-color=\"stopColor\"/>\n        </radialGradient>\n      </defs>\n      <circle :r=\"innerCircleRadius\"\n              :cx=\"radius\"\n              :cy=\"radius\"\n              fill=\"transparent\"\n              :stroke=\"innerStrokeColor\"\n              :stroke-dasharray=\"circumference\"\n              stroke-dashoffset=\"0\"\n              :stroke-linecap=\"strokeLinecap\"\n              :style=\"strokeStyle\"></circle>\n      <circle :transform=\"'rotate(270, ' + radius + ',' + radius + ')'\"\n              :r=\"innerCircleRadius\"\n              :cx=\"radius\"\n              :cy=\"radius\"\n              fill=\"transparent\"\n              :stroke=\"'url(#radial-gradient' + _uid + ')'\"\n              :stroke-dasharray=\"circumference\"\n              :stroke-dashoffset=\"circumference\"\n              :stroke-linecap=\"strokeLinecap\"\n              :style=\"progressStyle\"></circle>\n    </svg>\n  </div>\n</template>\n\n<script>\nexport default {\n  props: {\n    diameter: {\n      type: Number,\n      required: false,\n      default: 200\n    },\n    totalSteps: {\n      type: Number,\n      required: true,\n      default: 10\n    },\n    completedSteps: {\n      type: Number,\n      required: true,\n      default: 0\n    },\n    startColor: {\n      type: String,\n      required: false,\n      default: '#bbff42'\n    },\n    stopColor: {\n      type: String,\n      required: false,\n      default: '#429321'\n    },\n    strokeWidth: {\n      type: Number,\n      required: false,\n      default: 10\n    },\n    innerStrokeWidth: {\n      type: Number,\n      required: false,\n      default: 10\n    },\n    strokeLinecap: {\n      type: String,\n      required: false,\n      default: 'round'\n    },\n    animateSpeed: {\n      type: Number,\n      required: false,\n      default: 1000\n    },\n    innerStrokeColor: {\n      type: String,\n      required: false,\n      default: '#323232'\n    },\n    fps: {\n      type: Number,\n      required: false,\n      default: 60\n    },\n    timingFunc: {\n      type: String,\n      required: false,\n      default: 'linear'\n    },\n    isClockwise: {\n      type: Boolean,\n      required: false,\n      default: true\n    }\n  },\n\n  data () {\n    return {\n      gradient: {\n        fx: 0.99,\n        fy: 0.5,\n        cx: 0.5,\n        cy: 0.5,\n        r: 0.65\n      },\n      gradientAnimation: null,\n      currentAngle: 0,\n      strokeDashoffset: 0\n    }\n  },\n\n  computed: {\n    radius () {\n      return this.diameter / 2\n    },\n\n    circumference () {\n      return Math.PI * this.innerCircleDiameter\n    },\n\n    stepSize () {\n      if (this.totalSteps === 0) {\n        return 0\n      }\n\n      return 100 / this.totalSteps\n    },\n\n    finishedPercentage () {\n      return this.stepSize * this.completedSteps\n    },\n\n    circleSlice () {\n      return 2 * Math.PI / this.totalSteps\n    },\n\n    animateSlice () {\n      return this.circleSlice / this.totalPoints\n    },\n\n    innerCircleDiameter () {\n      return this.diameter - (this.innerStrokeWidth * 2)\n    },\n\n    innerCircleRadius () {\n      return this.innerCircleDiameter / 2\n    },\n\n    totalPoints () {\n      return this.animateSpeed / this.animationIncrements\n    },\n\n    animationIncrements () {\n      return 1000 / this.fps\n    },\n\n    hasGradient () {\n      return this.startColor !== this.stopColor\n    },\n\n    containerStyle () {\n      return {\n        height: `${this.diameter}px`,\n        width: `${this.diameter}px`\n      }\n    },\n\n    progressStyle () {\n      return {\n        height: `${this.diameter}px`,\n        width: `${this.diameter}px`,\n        strokeWidth: `${this.strokeWidth}px`,\n        strokeDashoffset: this.strokeDashoffset,\n        transition: `stroke-dashoffset ${this.animateSpeed}ms ${this.timingFunc}`\n      }\n    },\n\n    strokeStyle () {\n      return {\n        height: `${this.diameter}px`,\n        width: `${this.diameter}px`,\n        strokeWidth: `${this.innerStrokeWidth}px`\n      }\n    },\n\n    innerCircleStyle () {\n      return {\n        width: `${this.innerCircleDiameter}px`\n      }\n    },\n  },\n\n  methods: {\n    getStopPointsOfCircle (steps) {\n      const points = []\n\n      for (let i = 0; i < steps; i++) {\n        const angle = this.circleSlice * i\n        points.push(this.getPointOfCircle(angle))\n      }\n\n      return points\n    },\n\n    getPointOfCircle (angle) {\n      const radius = 0.5\n\n      const x = radius + (radius * Math.cos(angle))\n      const y = radius + (radius * Math.sin(angle))\n\n      return { x, y }\n    },\n\n    gotoPoint () {\n      const point = this.getPointOfCircle(this.currentAngle)\n\n      if (point.x && point.y) {\n        this.gradient.fx = point.x\n        this.gradient.fy = point.y\n      }\n    },\n\n    direction () {\n      if (this.isClockwise) {\n        return 1\n      }\n      return -1\n    },\n\n    changeProgress ({ isAnimate = true }) {\n      this.strokeDashoffset = ((100 - this.finishedPercentage) / 100) * this.circumference * this.direction()\n\n      if (this.gradientAnimation) {\n        clearInterval(this.gradientAnimation)\n      }\n\n      if (!isAnimate) {\n        this.gotoNextStep()\n        return\n      }\n\n      const angleOffset = (this.completedSteps - 1) * this.circleSlice\n      let i = (this.currentAngle - angleOffset) / this.animateSlice\n      const incrementer = Math.abs(i - this.totalPoints) / this.totalPoints\n      const isMoveForward = i < this.totalPoints\n\n      this.gradientAnimation = setInterval(() => {\n        if (isMoveForward && i >= this.totalPoints ||\n            !isMoveForward && i < this.totalPoints) {\n          clearInterval(this.gradientAnimation)\n          return\n        }\n\n        this.currentAngle = angleOffset + (this.animateSlice * i)\n        this.gotoPoint()\n\n        i += isMoveForward ? incrementer : -incrementer\n      }, this.animationIncrements)\n    },\n\n    gotoNextStep () {\n      this.currentAngle = this.completedSteps * this.circleSlice\n      this.gotoPoint()\n    }\n  },\n\n  watch: {\n    totalSteps () {\n      this.changeProgress({ isAnimate: true })\n    },\n\n    completedSteps () {\n      this.changeProgress({ isAnimate: true })\n    },\n\n    diameter () {\n      this.changeProgress({ isAnimate: true })\n    },\n\n    strokeWidth () {\n      this.changeProgress({ isAnimate: true })\n    }\n  },\n\n  created () {\n    this.changeProgress({ isAnimate: false })\n  }\n}\n</script>\n\n<style>\n.radial-progress-container {\n  position: relative;\n}\n\n.radial-progress-inner {\n  position: absolute;\n  top: 0; right: 0; bottom: 0; left: 0;\n  position: absolute;\n  border-radius: 50%;\n  margin: 0 auto;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n</style>\n"],"sourceRoot":""}]}