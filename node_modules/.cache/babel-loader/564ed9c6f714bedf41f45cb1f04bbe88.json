{"remainingRequest":"/mnt/c/Users/임태희/Desktop/최종프로젝트/vue/node_modules/babel-loader/lib/index.js!/mnt/c/Users/임태희/Desktop/최종프로젝트/vue/node_modules/vue-loader-v16/dist/templateLoader.js??ref--6!/mnt/c/Users/임태희/Desktop/최종프로젝트/vue/node_modules/cache-loader/dist/cjs.js??ref--1-0!/mnt/c/Users/임태희/Desktop/최종프로젝트/vue/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/mnt/c/Users/임태희/Desktop/최종프로젝트/vue/node_modules/vue3-quill/src/editor.vue?vue&type=template&id=9b8a5daa","dependencies":[{"path":"/mnt/c/Users/임태희/Desktop/최종프로젝트/vue/node_modules/vue3-quill/src/editor.vue","mtime":1638533952679},{"path":"/mnt/c/Users/임태희/Desktop/최종프로젝트/vue/babel.config.js","mtime":1638249462730},{"path":"/mnt/c/Users/임태희/Desktop/최종프로젝트/vue/node_modules/cache-loader/dist/cjs.js","mtime":1638249467723},{"path":"/mnt/c/Users/임태희/Desktop/최종프로젝트/vue/node_modules/babel-loader/lib/index.js","mtime":1638249467481},{"path":"/mnt/c/Users/임태희/Desktop/최종프로젝트/vue/node_modules/vue-loader-v16/dist/templateLoader.js","mtime":1638249479716},{"path":"/mnt/c/Users/임태희/Desktop/최종프로젝트/vue/node_modules/cache-loader/dist/cjs.js","mtime":1638249467723},{"path":"/mnt/c/Users/임태희/Desktop/최종프로젝트/vue/node_modules/vue-loader-v16/dist/index.js","mtime":1638249479707}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgb3BlbkJsb2NrIGFzIF9vcGVuQmxvY2ssIGNyZWF0ZUVsZW1lbnRCbG9jayBhcyBfY3JlYXRlRWxlbWVudEJsb2NrIH0gZnJvbSAidnVlIjsKdmFyIF9ob2lzdGVkXzEgPSB7CiAgcmVmOiAiZWRpdG9yIgp9OwpleHBvcnQgZnVuY3Rpb24gcmVuZGVyKF9jdHgsIF9jYWNoZSwgJHByb3BzLCAkc2V0dXAsICRkYXRhLCAkb3B0aW9ucykgewogIHJldHVybiBfb3BlbkJsb2NrKCksIF9jcmVhdGVFbGVtZW50QmxvY2soInNlY3Rpb24iLCBfaG9pc3RlZF8xLCBudWxsLCA1MTIKICAvKiBORUVEX1BBVENIICovCiAgKTsKfQ=="},{"version":3,"sources":["/mnt/c/Users/임태희/Desktop/최종프로젝트/vue/node_modules/vue3-quill/src/editor.vue"],"names":[],"mappings":";;AACW,EAAA,GAAG,EAAC;;;uBAAb,mBAAA,CAAgC,SAAhC,EAAA,UAAA,EAAgC,IAAhC,EAAgC;AAAA;AAAhC,G","sourcesContent":["<template>\r\n  <section ref=\"editor\"></section>\r\n</template>\r\n\r\n<script>\r\nimport 'quill/dist/quill.core.css'\r\nimport 'quill/dist/quill.snow.css'\r\nimport 'quill/dist/quill.bubble.css'\r\n\r\nimport Quill from 'quill'\r\nimport { onMounted, ref, watch, onUnmounted, onBeforeUnmount } from 'vue'\r\n\r\nconst defaultOptions = {\r\n  theme: 'snow',\r\n  boundary: document.body,\r\n  modules: {\r\n    toolbar: [\r\n      ['bold', 'italic', 'underline', 'strike'],\r\n      ['blockquote', 'code-block'],\r\n      [{ header: 1 }, { header: 2 }],\r\n      [{ list: 'ordered' }, { list: 'bullet' }],\r\n      [{ script: 'sub' }, { script: 'super' }],\r\n      [{ indent: '-1' }, { indent: '+1' }],\r\n      [{ direction: 'rtl' }],\r\n      [{ size: ['small', false, 'large', 'huge'] }],\r\n      [{ header: [1, 2, 3, 4, 5, 6, false] }],\r\n      [{ color: [] }, { background: [] }],\r\n      [{ font: [] }],\r\n      [{ align: [] }],\r\n      ['clean'],\r\n      ['link', 'image', 'video']\r\n    ]\r\n  },\r\n  placeholder: 'Insert content here ...',\r\n  readOnly: false\r\n}\r\nexport default {\r\n  name: 'quill-editor',\r\n  props: {\r\n    content: String,\r\n    value: String,\r\n    disabled: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    options: {\r\n      type: Object,\r\n      required: false,\r\n      default: () => ({})\r\n    }\r\n  },\r\n  emits: ['ready', 'change', 'input', 'blur', 'focus', 'update:value'],\r\n  setup(props, context) {\r\n    const state = {\r\n      editorOption: {},\r\n      quill: null\r\n    }\r\n\r\n    let _content = ''\r\n\r\n    watch(\r\n      () => props.value,\r\n      val => {\r\n        if (state.quill) {\r\n          if (val && val !== _content) {\r\n            _content = val\r\n            state.quill.pasteHTML(val)\r\n          } else if (!val) {\r\n            state.quill.setText('')\r\n          }\r\n        }\r\n      }\r\n    )\r\n\r\n    watch(\r\n      () => props.content,\r\n      val => {\r\n        if (state.quill) {\r\n          if (val && val !== _content) {\r\n            _content = val\r\n            state.quill.pasteHTML(val)\r\n          } else if (!val) {\r\n            state.quill.setText('')\r\n          }\r\n        }\r\n      }\r\n    )\r\n\r\n    watch(\r\n      () => props.disabled,\r\n      val => {\r\n        if (state.quill) {\r\n          state.quill.enable(!val)\r\n        }\r\n      }\r\n    )\r\n\r\n    const editor = ref(null)\r\n\r\n    const mergeOptions = (def, custom) => {\r\n      for (const key in custom) {\r\n        if (!def[key] || key !== 'modules') {\r\n          def[key] = custom[key]\r\n        } else {\r\n          mergeOptions(def[key], custom[key])\r\n        }\r\n      }\r\n      return def\r\n    }\r\n\r\n    const initialize = () => {\r\n      if (editor.value) {\r\n        // Options\r\n        state.editorOption = mergeOptions(defaultOptions, props.options)\r\n        state.editorOption.readOnly = props.disabled ? true : false\r\n        // Instance\r\n        state.quill = new Quill(editor.value, state.editorOption)\r\n        // console.log('intilized')\r\n\r\n        // Set editor content\r\n        if (props.value) {\r\n          state.quill.pasteHTML(props.value)\r\n        }\r\n\r\n        // Mark model as touched if editor lost focus\r\n        state.quill.on('selection-change', range => {\r\n          if (!range) {\r\n            context.emit('blur', state.quill)\r\n          } else {\r\n            context.emit('focus', state.quill)\r\n          }\r\n        })\r\n        // Update model if text changes\r\n        state.quill.on('text-change', () => {\r\n          // diabled editor after content initialized\r\n          if (props.disabled) {\r\n            state.quill.enable(false)\r\n          }\r\n          let html = editor.value.children[0].innerHTML\r\n          const quill = state.quill\r\n          const text = state.quill.getText()\r\n          if (html === '<p><br></p>') html = ''\r\n          _content = html\r\n          context.emit('update:value', _content)\r\n          context.emit('change', { html, text, quill })\r\n        })\r\n\r\n        // Emit ready event\r\n        context.emit('ready', state.quill)\r\n      }\r\n    }\r\n\r\n    onBeforeUnmount(() => {\r\n      const editorToolbar = editor.value.previousSibling\r\n      if (editorToolbar && editorToolbar.className.indexOf('ql-toolbar') > -1) {\r\n        editorToolbar.parentNode.removeChild(editorToolbar)\r\n      }\r\n    })\r\n\r\n    onMounted(() => {\r\n      initialize()\r\n    })\r\n\r\n    onUnmounted(() => {\r\n      state.quill = null\r\n    })\r\n\r\n    return { editor }\r\n  }\r\n}\r\n</script>\r\n\r\n"],"sourceRoot":""}]}