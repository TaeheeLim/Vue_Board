{"remainingRequest":"/Users/andaegeun/Desktop/대덕 최프/kanboo_Vue/kanboo/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/Users/andaegeun/Desktop/대덕 최프/kanboo_Vue/kanboo/src/components/component/acess/projectDetail/dashBoard/RadialProgress.vue?vue&type=style&index=0&id=ace7330c&scoped=true&lang=css","dependencies":[{"path":"/Users/andaegeun/Desktop/대덕 최프/kanboo_Vue/kanboo/src/components/component/acess/projectDetail/dashBoard/RadialProgress.vue","mtime":1637301293937},{"path":"/Users/andaegeun/Desktop/대덕 최프/kanboo_Vue/kanboo/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/andaegeun/Desktop/대덕 최프/kanboo_Vue/kanboo/node_modules/vue-loader-v16/dist/stylePostLoader.js","mtime":499162500000},{"path":"/Users/andaegeun/Desktop/대덕 최프/kanboo_Vue/kanboo/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/andaegeun/Desktop/대덕 최프/kanboo_Vue/kanboo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/andaegeun/Desktop/대덕 최프/kanboo_Vue/kanboo/node_modules/vue-loader-v16/dist/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQoudnJwX193cmFwcGVyIHsNCiAgcG9zaXRpb246IHJlbGF0aXZlOw0KfQ0KDQoudnJwX19pbm5lciB7DQogIHBvc2l0aW9uOiBhYnNvbHV0ZTsNCiAgdG9wOiAwOw0KICByaWdodDogMDsNCiAgYm90dG9tOiAwOw0KICBsZWZ0OiAwOw0KICBib3JkZXItcmFkaXVzOiA1MCU7DQogIG1hcmdpbjogMCBhdXRvOw0KICBkaXNwbGF5OiBmbGV4Ow0KICBmbGV4LWRpcmVjdGlvbjogY29sdW1uOw0KICBhbGlnbi1pdGVtczogY2VudGVyOw0KICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsNCn0NCg=="},{"version":3,"sources":["/Users/andaegeun/Desktop/대덕 최프/kanboo_Vue/kanboo/src/components/component/acess/projectDetail/dashBoard/RadialProgress.vue"],"names":[],"mappings":";AAuOA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;EACZ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpB;;AAEA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;EACV,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EAClB,CAAC,CAAC,CAAC,EAAE,CAAC;EACN,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;EACR,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;EACT,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;EACP,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EAClB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;EACd,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EACb,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACtB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzB","file":"/Users/andaegeun/Desktop/대덕 최프/kanboo_Vue/kanboo/src/components/component/acess/projectDetail/dashBoard/RadialProgress.vue","sourceRoot":"","sourcesContent":["<template>\r\n  <div class=\"vrp__wrapper\" :style=\"containerStyle\">\r\n    <div class=\"vrp__inner\" :style=\"innerCircleStyle\">\r\n      <slot></slot>\r\n    </div>\r\n\r\n    <svg :width=\"diameter\" :height=\"diameter\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\">\r\n      <defs>\r\n        <radialGradient id=\"radial-gradient\" :fx=\"gradient.fx\" :fy=\"gradient.fy\" :cx=\"gradient.cx\" :cy=\"gradient.cy\" :r=\"gradient.r\">\r\n          <stop offset=\"30%\" :stop-color=\"startColor\" />\r\n          <stop offset=\"100%\" :stop-color=\"stopColor\" />\r\n        </radialGradient>\r\n      </defs>\r\n\r\n      <circle\r\n        :r=\"innerCircleRadius\"\r\n        :cx=\"radius\"\r\n        :cy=\"radius\"\r\n        fill=\"transparent\"\r\n        :stroke=\"innerStrokeColor\"\r\n        :stroke-dasharray=\"circumference\"\r\n        stroke-dashoffset=\"0\"\r\n        :stroke-linecap=\"strokeLinecap\"\r\n        :style=\"strokeStyle\"\r\n      ></circle>\r\n\r\n      <circle\r\n        :transform=\"'rotate(270, ' + radius + ',' + radius + ')'\"\r\n        :r=\"innerCircleRadius\"\r\n        :cx=\"radius\"\r\n        :cy=\"radius\"\r\n        fill=\"transparent\"\r\n        stroke=\"url('#radial-gradient')\"\r\n        :stroke-dasharray=\"circumference\"\r\n        :stroke-dashoffset=\"circumference\"\r\n        :stroke-linecap=\"strokeLinecap\"\r\n        :style=\"progressStyle\"\r\n      ></circle>\r\n    </svg>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { computed, reactive, ref, watch, defineComponent, PropType } from \"vue\";\r\n\r\nexport default defineComponent({\r\n  props: {\r\n    // Sets width/diameter of the inner stroke.\r\n    diameter: {\r\n      type: Number as PropType<number>,\r\n      required: false,\r\n      default: 200,\r\n    },\r\n    // Sets the total steps/progress to the end.\r\n    totalSteps: {\r\n      type: Number as PropType<number>,\r\n      required: true,\r\n      default: 10,\r\n    },\r\n    // Sets the current progress of the inner stroke.\r\n    completedSteps: {\r\n      type: Number as PropType<number>,\r\n      required: true,\r\n      default: 0,\r\n    },\r\n    // Sets the start color of the inner stroke (gradient).\r\n    startColor: {\r\n      type: String as PropType<string>,\r\n      required: false,\r\n      default: \"#00C58E\",\r\n    },\r\n    // Sets the end color of the inner stroke (gradient).\r\n    stopColor: {\r\n      type: String as PropType<string>,\r\n      required: false,\r\n      default: \"#00E0A1\",\r\n    },\r\n    // Sets the color of the inner stroke to be applied to the shape.\r\n    innerStrokeColor: {\r\n      type: String as PropType<string>,\r\n      required: false,\r\n      default: \"#2F495E\",\r\n    },\r\n    // Sets the width of the stroke to be applied to the shape.\r\n    // Read more: https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-width\r\n    strokeWidth: {\r\n      type: Number as PropType<number>,\r\n      required: false,\r\n      default: 10,\r\n    },\r\n    // Sets the  width of the inner stroke to be applied to the shape.\r\n    innerStrokeWidth: {\r\n      type: Number as PropType<number>,\r\n      required: false,\r\n      default: 10,\r\n    },\r\n    // Sets the shape to be used at the end of stroked.\r\n    // Read more: https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-linecap\r\n    strokeLinecap: {\r\n      required: false,\r\n      default: \"round\",\r\n    },\r\n    // Sets how long the animation should take to complete one cycle.\r\n    // Read more: https://www.w3schools.com/cssref/css3_pr_animation-duration.asp\r\n    animateSpeed: {\r\n      type: Number as PropType<number>,\r\n      required: false,\r\n      default: 1000,\r\n    },\r\n    // Sets the frames per seconds to update inner stroke animation.\r\n    fps: {\r\n      type: Number as PropType<number>,\r\n      required: false,\r\n      default: 60,\r\n    },\r\n    // Sets how the animation progresses through the duration of each cycle.\r\n    // Read more: https://developer.mozilla.org/en-US/docs/Web/CSS/animation-timing-function\r\n    timingFunc: {\r\n      type: String as PropType<string>,\r\n      required: false,\r\n      default: \"linear\",\r\n    },\r\n    // Sets the inner stroke direction.\r\n    isClockwise: {\r\n      type: Boolean as PropType<boolean>,\r\n      required: false,\r\n      default: true,\r\n    },\r\n  },\r\n\r\n  setup(props) {\r\n    const gradient = reactive({\r\n      fx: 0.99,\r\n      fy: 0.5,\r\n      cx: 0.5,\r\n      cy: 0.5,\r\n      r: 0.65,\r\n    });\r\n\r\n    const strokeDashoffset = ref(0);\r\n    const currentAngle = ref(0);\r\n    const gradientAnimation = ref<number | null>(null);\r\n\r\n    const radius = computed(() => props.diameter / 2);\r\n    const innerCircleDiameter = computed(() => props.diameter - props.innerStrokeWidth * 2);\r\n    const circumference = computed(() => Math.PI * innerCircleDiameter.value);\r\n    const stepSize = computed(() => (props.totalSteps === 0 ? 0 : 100 / props.totalSteps));\r\n    const finishedPercentage = computed(() => stepSize.value * props.completedSteps);\r\n    const circleSlice = computed(() => (2 * Math.PI) / props.totalSteps);\r\n    const animationIncrements = computed(() => 100 / props.fps);\r\n    const totalPoints = computed(() => props.animateSpeed / animationIncrements.value);\r\n    const animateSlice = computed(() => circleSlice.value / totalPoints.value);\r\n    const innerCircleRadius = computed(() => innerCircleDiameter.value / 2);\r\n\r\n\r\n\r\n    const strokeStyle = computed<Style>(() => ({\r\n      height: `${props.diameter}px`,\r\n      width: `${props.diameter}px`,\r\n      strokeWidth: `${props.innerStrokeWidth}px`,\r\n    }));\r\n\r\n    const innerCircleStyle = computed<Style>(() => ({\r\n      width: `${innerCircleDiameter.value}px`,\r\n    }));\r\n\r\n    watch(() => [props.diameter, props.totalSteps, props.completedSteps, props.strokeWidth], changeProgress, { immediate: true });\r\n\r\n    function getPointOfCircle(angle: number) {\r\n      const radius = 0.5;\r\n      const x = radius + radius * Math.cos(angle);\r\n      const y = radius + radius * Math.sin(angle);\r\n      return { x, y };\r\n    }\r\n\r\n    function gotoPoint() {\r\n      const point = getPointOfCircle(currentAngle.value);\r\n      if (point.x && point.y) {\r\n        gradient.fx = point.x;\r\n        gradient.fy = point.y;\r\n      }\r\n    }\r\n\r\n    function direction() {\r\n      return props.isClockwise ? 1 : -1;\r\n    }\r\n\r\n    function changeProgress() {\r\n      strokeDashoffset.value = ((100 - finishedPercentage.value) / 100) * circumference.value * direction();\r\n\r\n      if (gradientAnimation.value) {\r\n        clearInterval(gradientAnimation.value);\r\n      }\r\n\r\n      const angleOffset = (props.completedSteps - 1) * circleSlice.value;\r\n      let i = (currentAngle.value - angleOffset) / animateSlice.value;\r\n      const incrementer = Math.abs(i - totalPoints.value) / totalPoints.value;\r\n      const isMoveForward = i < totalPoints.value;\r\n\r\n      // @ts-ignore\r\n      gradientAnimation.value = setInterval(() => {\r\n        if ((isMoveForward && i >= totalPoints.value) || (!isMoveForward && i < totalPoints.value)) {\r\n          gradientAnimation.value && clearInterval(gradientAnimation.value);\r\n          return;\r\n        }\r\n\r\n        currentAngle.value = angleOffset + animateSlice.value * i;\r\n        gotoPoint();\r\n\r\n        i += isMoveForward ? incrementer : -incrementer;\r\n      }, animationIncrements.value);\r\n    }\r\n\r\n    return {\r\n      gradientAnimation,\r\n      innerCircleRadius,\r\n      strokeDashoffset,\r\n      innerCircleStyle,\r\n      containerStyle,\r\n      circumference,\r\n      progressStyle,\r\n      currentAngle,\r\n      strokeStyle,\r\n      gradient,\r\n      radius,\r\n    };\r\n  },\r\n});\r\n</script>\r\n\r\n<style scoped>\r\n.vrp__wrapper {\r\n  position: relative;\r\n}\r\n\r\n.vrp__inner {\r\n  position: absolute;\r\n  top: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  left: 0;\r\n  border-radius: 50%;\r\n  margin: 0 auto;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n</style>\r\n"]}]}